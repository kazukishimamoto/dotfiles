// Place your key bindings in this file to override the defaults
[
  // # tmux + emacs風　 window移動
  // ## window移動
  // ### 次のEditorに移動
  {
    "key": "ctrl+g f",
    "command": "workbench.action.nextEditor",
    "when": "editorTextFocus"
  },
  // ### 前のEditorに移動
  {
    "key": "ctrl+g b",
    "command": "workbench.action.previousEditor",
    "when": "editorTextFocus"
  },
  // ### 次のEditorGroupへ移動
  {
    "key": "ctrl+g n",
    "command": "workbench.action.focusNextGroup",
    "when": "editorTextFocus"
  },
  // ### 前のEditorGroupへ移動
  {
    "key": "ctrl+g p",
    "command": "workbench.action.focusPreviousGroup",
    "when": "editorTextFocus"
  },
  // ## window分割
  // ### 現在のEditorを右のEditorGroupに移動
  {
    "key": "ctrl+g d",
    "command": "workbench.action.moveEditorToRightGroup",
    "when": "editorTextFocus"
  },
  // ### 現在のEditorを左のEditorGroupに移動
  {
    "key": "ctrl+g h",
    "command": "workbench.action.moveEditorToLeftGroup",
    "when": "editorTextFocus"
  },
  // ### 現在のファイルの相対パスをコピー
  {
    "key": "ctrl+g c",
    "command": "copyRelativeFilePath",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+;",
    "command": "workbench.action.terminal.focus"
  },
  {
    "key": "ctrl+;",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "cmd+;",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quickOpenView"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.quickOpenView",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+s ctrl+s",
    "command": "editor.action.insertSnippet"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.nextPanelView"
  },
  {
    "key": "ctrl+x ctrl+f",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor && neovim.mode != 'insert'"
  },
  {
    "key": "ctrl+x ctrl+s",
    "command": "workbench.action.files.save"
  },
  {
    "command": "extension.runLineOnRspec",
    "key": "cmd+l",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "ctrl+a",
    "command": "-vscode-neovim.ctrl-a-insert",
    "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  }
]
